/*
 * The MIT License (MIT)
 *
 * Copyright(c) 2013 Bert Pareyn
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */

var fs = require('fs');
var IO = require('./io');

var log = require('bunyan').createLogger({name: 'system'});

// Cached available module paths
var cachedAvailableModules = [];

/**
 * Gets the available modules
 *
 * @param  {Function}   callback        Standard callback function
 * @param  {Object}     callback.err    Error object
 */
var getAvailableModules = function(callback) {
    IO.getFileListForFolder('node_modules', function(err, modules) {
        if (err) {
            return callback(err);
        }

        var finalModules = [];
        var modulePriority = {};

        // aggregate the oae- modules
        for (var i = 0; i < modules.length; i++) {
            var module = modules[i];
            if (module.substring(0, 3) === 'bd-') {
                finalModules.push(module);
            }
        }

        // Cache the available modules
        cachedAvailableModules = finalModules;

        callback(null, finalModules);
    });
};

/**
 * Initialize the available modules (REST endpoints and API)
 *
 * @param  {Object}     config          Configuration to start the server with
 * @param  {Function}   callback        Standard callback function
 * @param  {Object}     callback.err    Error object
 */
var initModules = function(config, callback) {
    log.info('Initialize modules');

    var currentModule = 0;
    var initModule = function() {
        if (currentModule === cachedAvailableModules.length) {
            callback();
        } else {
            var module = cachedAvailableModules[currentModule];
            var path = 'node_modules/' + module + '/lib/init.js';
            var exists = fs.existsSync(path);
            currentModule++;
            if (exists) {
                require(module + '/lib/init')(config, function(err) {
                    if (err) {
                        log.error({err: err}, 'Error initializing module %s', module);
                        return callback(err);
                    }
                    log.info('Initialized module %s', module);
                    initModule();
                });
            } else {
                log.info('Initialized module %s (nothing to do)', module);
                initModule();
            }
        }
    };
    initModule();
};

/**
 * Initialize all of the REST endpoints for all of the modules
 *
 * @param  {String[]}   modules     An array of modules that should be bootstrapped. These need to be located in the ./node_modules directory
 * @api private
 */
var initModuleREST = function(modules, callback) {
    for (var m = 0; m < modules.length; m++) {
        var path = 'node_modules/' + modules[m] + '/lib/rest.js';
        var exists = fs.existsSync(path);
        if (exists) {
            log.info('REST services for %s have been registered', modules[m]);
            require(modules[m] + '/lib/rest');
        }
    }
};

/**
 * Include the available bd-* modules in the startup cycle
 *
 * @param  {Object}     config          Configuration to start the server with
 * @param  {Function}   callback        Standard callback function
 * @param  {Object}     callback.err    Error object
 */
module.exports.initModules = function(config, callback) {
    // Read the available bd-* modules
    getAvailableModules(function(err, modules) {
        if (err) {
            return callback(err);
        }

        log.info('Starting modules: %s', modules.join(', '));

        // Initialize the available modules
        initModules(config, function(err) {
            if (err) {
                return callback(err);
            }

            // Initialize the module REST endpoints
            initModuleREST(modules);

            // Continue the startup cycle
            callback(null);
        });
    });
};
