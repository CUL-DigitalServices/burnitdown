/*
 * The MIT License (MIT)
 * 
 * Copyright(c) 2013 Bert Pareyn
 * 
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 * 
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 * 
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */

var fs = require('fs');

/**
 * Asynchronous read of a file on the path provided, passes file content or error in the callback
 *
 * @param  {String}     path            The path to the file
 * @param  {Function}   callback        Function executed when the file has been read, or failed to be read
 * @param  {Object}     callback.err    Error, if any, returned when done reading the file
 * @param  {String}     callback.data   Data returned after reading the file completed
 */
var readFile = module.exports.readFile = function(path, callback) {
    fs.readFile(path, 'utf8', callback);
};

/**
 * Get a list of all of the files and folders inside of a folder. Hidden files and folder (starting with
 * '.', like .DS_STORE) will be excluded from the returned list.
 *
 * @param  {String}      foldername         Path of the folder for which we should get the containing files and folders
 * @param  {Function}    callback           Standard callback function
 * @param  {Object}      callback.err       An error that occurred, if any
 * @param  {String[]}    callback.files     Array containing all of the file and foldernames that exist inside of the given folder
 */
var getFileListForFolder = module.exports.getFileListForFolder = function(foldername, callback) {
    fs.exists(foldername, function(exists) {
        if (!exists) {
            return callback(null, []);
        }

        fs.stat(foldername, function(err, stat) {
            if (err) {
                return callback(err);
            } else if (!stat.isDirectory()) {
                return callback(null, []);
            }

            fs.readdir(foldername, function(err, files) {
                if (err) {
                    return callback(err);
                }

                var finalFiles = [];
                for (var f = 0; f < files.length; f++) {
                    if (files[f].substring(0, 1) !== '.') {
                        finalFiles.push(files[f]);
                    }
                }

                callback(null, finalFiles);
            });
        });

    });
};
